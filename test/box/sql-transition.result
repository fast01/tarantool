test_run = require('test_run').new()
---
...
test_run:cmd("setopt delimiter ';;'")
---
- true
...
-- Manually feed in data in sqlite_master row format.
-- Populate schema objects, make it possible to query
-- Tarantool spaces with SQL.
ffi = require "ffi"
ffi.cdef[[
    int sql_schema_put(int, int, const char**);
    void free(void *);
]]

function sql_schema_put(idb, ...)
    local argc = select('#', ...)
    local argv, cargv = {}, ffi.new('const char*[?]', argc+1)
    for i = 0,argc-1 do
        local v = tostring(select(i+1, ...))
        argv[i] = v
        cargv[i] = v
    end
    cargv[argc] = nil
    local rc = ffi.C.sql_schema_put(idb, argc, cargv);
    local err_msg
    if cargv[0] ~= nil then
        err_msg = ffi.string(cargv[0])
        ffi.C.free(ffi.cast('void *', cargv[0]))
    end
    return rc, err_msg
end

function sql_pageno(space_id, index_id)
    return space_id * 32 + index_id
end

test_run:cmd("setopt delimiter ''");;
---
...
-- test invalid input
sql_schema_put(0, "invalid", 1, "CREATE FROB")
---
- 11
- 'malformed database schema (invalid) - near "FROB": syntax error'
...
-- create space
foobar = box.schema.space.create("foobar")
---
...
_ = foobar:create_index("primary",{parts={1,"number"}})
---
...
foobar_pageno = sql_pageno(foobar.id, foobar.index.primary.id)
---
...
foobar_sql = "CREATE TABLE foobar (foo PRIMARY KEY, bar) WITHOUT ROWID"
---
...
sql_schema_put(0, "foobar", foobar_pageno, foobar_sql)
---
- 0
- null
...
sql_schema_put(0, "sqlite_autoindex_foobar_1", foobar_pageno, "")
---
- 0
- null
...
-- prepare data
box.sql.execute("INSERT INTO foobar VALUES (1, 'foo')")
---
...
box.sql.execute("INSERT INTO foobar VALUES (2, 'bar')")
---
...
box.sql.execute("INSERT INTO foobar VALUES (1000, 'foobar')")
---
...
box.sql.execute("INSERT INTO foobar VALUES (1, 'duplicate')")
---
- error: 'UNIQUE constraint failed: foobar.foo'
...
-- simple select
box.sql.execute("SELECT bar, foo, 42, 'awesome' FROM foobar")
---
- - ['foo', 1, 42, 'awesome']
  - ['bar', 2, 42, 'awesome']
  - ['foobar', 1000, 42, 'awesome']
...
box.sql.execute("SELECT bar, foo, 42, 'awesome' FROM foobar LIMIT 2")
---
- - ['foo', 1, 42, 'awesome']
  - ['bar', 2, 42, 'awesome']
...
box.sql.execute("SELECT bar, foo, 42, 'awesome' FROM foobar WHERE foo=2")
---
- - ['bar', 2, 42, 'awesome']
...
box.sql.execute("SELECT bar, foo, 42, 'awesome' FROM foobar WHERE foo>2")
---
- - ['foobar', 1000, 42, 'awesome']
...
box.sql.execute("SELECT bar, foo, 42, 'awesome' FROM foobar WHERE foo>=2")
---
- - ['bar', 2, 42, 'awesome']
  - ['foobar', 1000, 42, 'awesome']
...
box.sql.execute("SELECT bar, foo, 42, 'awesome' FROM foobar WHERE foo=10000")
---
- []
...
box.sql.execute("SELECT bar, foo, 42, 'awesome' FROM foobar WHERE foo>10000")
---
- []
...
box.sql.execute("SELECT bar, foo, 42, 'awesome' FROM foobar WHERE foo<2")
---
- - ['foo', 1, 42, 'awesome']
...
box.sql.execute("SELECT bar, foo, 42, 'awesome' FROM foobar WHERE foo<2.001")
---
- - ['foo', 1, 42, 'awesome']
  - ['bar', 2, 42, 'awesome']
...
box.sql.execute("SELECT bar, foo, 42, 'awesome' FROM foobar WHERE foo<=2")
---
- - ['foo', 1, 42, 'awesome']
  - ['bar', 2, 42, 'awesome']
...
box.sql.execute("SELECT bar, foo, 42, 'awesome' FROM foobar WHERE foo<100")
---
- - ['foo', 1, 42, 'awesome']
  - ['bar', 2, 42, 'awesome']
...
box.sql.execute("SELECT bar, foo, 42, 'awesome' FROM foobar WHERE bar='foo'")
---
- - ['foo', 1, 42, 'awesome']
...
box.sql.execute("SELECT count(*) FROM foobar")
---
- - [3]
...
box.sql.execute("SELECT count(*) FROM foobar WHERE bar='foo'")
---
- - [1]
...
box.sql.execute("SELECT bar, foo, 42, 'awesome' FROM foobar ORDER BY bar")
---
- - ['bar', 2, 42, 'awesome']
  - ['foo', 1, 42, 'awesome']
  - ['foobar', 1000, 42, 'awesome']
...
box.sql.execute("SELECT bar, foo, 42, 'awesome' FROM foobar ORDER BY bar DESC")
---
- - ['foobar', 1000, 42, 'awesome']
  - ['foo', 1, 42, 'awesome']
  - ['bar', 2, 42, 'awesome']
...
-- updates
box.sql.execute("REPLACE INTO foobar VALUES (1, 'cacodaemon')")
---
...
box.sql.execute("SELECT COUNT(*) FROM foobar WHERE foo=1")
---
- - [1]
...
box.sql.execute("SELECT COUNT(*) FROM foobar WHERE bar='cacodaemon'")
---
- - [1]
...
box.sql.execute("DELETE FROM foobar WHERE bar='cacodaemon'")
---
...
box.sql.execute("SELECT COUNT(*) FROM foobar WHERE bar='cacodaemon'")
---
- - [0]
...
-- cleanup
foobar:drop()
---
...

fiber = require('fiber')
---
...
-- space secondary index create
space = box.schema.space.create('test', { engine = 'vinyl' })
---
...
index1 = space:create_index('primary')
---
...
index2 = space:create_index('secondary')
---
...
space:drop()
---
...
-- space index create hash
space = box.schema.space.create('test', { engine = 'vinyl' })
---
...
index = space:create_index('primary', {type = 'hash'})
---
- error: Unsupported index type supplied for index 'primary' in space 'test'
...
space:drop()
---
...
-- new indexes on not empty space are unsupported
space = box.schema.space.create('test', { engine = 'vinyl' })
---
...
index = space:create_index('primary')
---
...
space:insert({1})
---
- [1]
...
-- fail because of wrong tuple format {1}, but need {1, ...}
index2 = space:create_index('secondary', { parts = {2, 'unsigned'} })
---
- error: Vinyl does not support creating new indexes for a not empty space
...
#box.space._index:select({space.id})
---
- 1
...
space:drop()
---
...
space = box.schema.space.create('test', { engine = 'vinyl' })
---
...
index = space:create_index('primary')
---
...
space:insert({1, 2})
---
- [1, 2]
...
index2 = space:create_index('secondary', { parts = {2, 'unsigned'} })
---
- error: Vinyl does not support creating new indexes for a not empty space
...
#box.space._index:select({space.id})
---
- 1
...
space:drop()
---
...
space = box.schema.space.create('test', { engine = 'vinyl' })
---
...
index = space:create_index('primary')
---
...
space:insert({1, 2})
---
- [1, 2]
...
index2 = space:create_index('secondary', { parts = {2, 'unsigned'} })
---
- error: Vinyl does not support creating new indexes for a not empty space
...
#box.space._index:select({space.id})
---
- 1
...
space:delete({1})
---
...
-- must fail because vy_mems have data
index2 = space:create_index('secondary', { parts = {2, 'unsigned'} })
---
- error: Vinyl does not support creating new indexes for a not empty space
...
box.snapshot()
---
- ok
...
while space.index.primary:info().count ~= 0 do fiber.sleep(0.01) end
---
...
-- after a dump REPLACE + DELETE = nothing, so the space is empty now and
-- can be altered.
index2 = space:create_index('secondary', { parts = {2, 'unsigned'} })
---
...
#box.space._index:select({space.id})
---
- 2
...
space:insert({1, 2})
---
- [1, 2]
...
index:select{}
---
- - [1, 2]
...
index2:select{}
---
- - [1, 2]
...
space:drop()
---
...
space = box.schema.space.create('test', { engine = 'vinyl' })
---
...
index = space:create_index('primary', { run_count_per_level = 2 })
---
...
space:insert({1, 2})
---
- [1, 2]
...
box.snapshot()
---
- ok
...
space:delete({1})
---
...
box.snapshot()
---
- ok
...
while space.index.primary:info().run_count ~= 2 do fiber.sleep(0.01) end
---
...
-- must fail because vy_runs have data
index2 = space:create_index('secondary', { parts = {2, 'unsigned'} })
---
- error: Vinyl does not support creating new indexes for a not empty space
...
-- After compaction the REPLACE + DELETE + DELETE = nothing, so
-- the space is now empty and can be altered.
space:delete({1})
---
...
-- Make sure the run is big enough to trigger compaction.
space:insert({2, 3})
---
- [2, 3]
...
space:delete({2})
---
...
box.snapshot()
---
- ok
...
-- Wait until the dump is finished.
while space.index.primary:info().count ~= 0 do fiber.sleep(0.01) end
---
...
index2 = space:create_index('secondary', { parts = {2, 'unsigned'} })
---
...
space:drop()
---
...
--
-- gh-1632: index:bsize()
--
space = box.schema.space.create('test', { engine = 'vinyl' })
---
...
pk = space:create_index('primary', { type = 'tree', parts = {1, 'unsigned'}  })
---
...
for i=1,10 do box.space.test:replace({i}) end
---
...
box.space.test.index.primary:bsize() > 0
---
- true
...
box.snapshot()
---
- ok
...
while space.index.primary:info().run_count ~= 1 do fiber.sleep(0.01) end
---
...
box.space.test.index.primary:bsize() == 0
---
- true
...
space:drop()
---
...
--
-- gh-1709: need error on altering space
--
space = box.schema.space.create('test', {engine='vinyl'})
---
...
pk = space:create_index('pk', {parts = {1, 'unsigned'}})
---
...
space:auto_increment{1}
---
- [1, 1]
...
space:auto_increment{2}
---
- [2, 2]
...
space:auto_increment{3}
---
- [3, 3]
...
box.space._index:replace{space.id, 0, 'pk', 'tree', {unique=true}, {{0, 'unsigned'}, {1, 'unsigned'}}}
---
- error: Vinyl does not support altering definition of not empty indexes
...
space:select{}
---
- - [1, 1]
  - [2, 2]
  - [3, 3]
...
space:drop()
---
...
--
-- gh-2109: allow alter some opts of not empty indexes
--
space = box.schema.space.create('test', { engine = 'vinyl' })
---
...
pk = space:create_index('pk', {run_count_per_level = 3})
---
...
-- Create run and mem and then change page_size,
-- run_count_per_level and make dump.
space:auto_increment{1}
---
- [1, 1]
...
space:auto_increment{2}
---
- [2, 2]
...
space:auto_increment{3}
---
- [3, 3]
...
box.snapshot()
---
- ok
...
space:auto_increment{1}
---
- [4, 1]
...
space:auto_increment{2}
---
- [5, 2]
...
space:auto_increment{3}
---
- [6, 3]
...
pk:info().run_count
---
- 1
...
pk:info().page_size
---
- 1024
...
pk:alter({page_size = pk:info().page_size * 2, run_count_per_level = 1})
---
...
space:auto_increment{1}
---
- [7, 1]
...
box.snapshot()
---
- ok
...
-- Wait for compaction. The compaction is starting because
-- the new run_count_per_level == 1 and there are two runs.
-- In old opts run_count_per_level was 3 and the compaction
-- would not stated.
while pk:info().run_count ~= 1 do fiber.sleep(0.01) end
---
...
pk:info().run_count -- == 1, because new run_count_per_level == 1
---
- 1
...
pk:info().page_size
---
- 2048
...
space:drop()
---
...
--
-- Ensure that runs with different page_sizes can be compacted.
--
space = box.schema.space.create('test', {engine='vinyl'})
---
...
page_size = 8192
---
...
range_size = 1024 * 1024 * 1024
---
...
pk = space:create_index('pk', {run_count_per_level = 10, page_size = page_size, range_size = range_size})
---
...
pad_size = page_size / 5
---
...
pad = string.rep('I', pad_size)
---
...
-- Create 4 pages with sizes 'page_size'
for i = 1, 20 do space:replace{i, pad} end
---
...
est_bsize = pad_size * 20
---
...
box.snapshot()
---
- ok
...
-- Wait end of the dump
while pk:info().run_count ~= 1 do fiber.sleep(0.01) end
---
...
pk:info().page_count
---
- 4
...
pk:info().page_size
---
- 8192
...
pk:info().run_count
---
- 1
...
-- Change page_size and trigger compaction
page_size = page_size * 2
---
...
pk:alter({page_size = page_size, run_count_per_level = 1})
---
...
pad_size = page_size / 5
---
...
pad = string.rep('I', pad_size)
---
...
-- Create 4 pages with new sizes in new run
for i = 1, 20 do space:replace{i + 20, pad} end
---
...
est_bsize = est_bsize + pad_size * 20
---
...
box.snapshot()
---
- ok
...
-- Wait for compaction
while pk:info().run_count ~= 1 do fiber.sleep(0.01) end
---
...
pk:info().page_count
---
- 6
...
pk:info().page_size
---
- 16384
...
pk:info().run_count
---
- 1
...
est_bsize / page_size == pk:info().page_count
---
- true
...
space:drop()
---
...
--
-- Change range size to trigger split.
--
space = box.schema.space.create('test', {engine = 'vinyl'})
---
...
page_size = 64
---
...
range_size = page_size * 15
---
...
pk = space:create_index('pk', {page_size = page_size, range_size = range_size, run_count_per_level = 1})
---
...
pad = ''
---
...
for i = 1, 64 do pad = pad..(i % 10) end
---
...
for i = 1, 8 do space:replace{i, pad} end
---
...
box.snapshot()
---
- ok
...
while pk:info().run_count ~= 1 do fiber.sleep(0.01) end
---
...
-- Decrease the range_size and dump many runs to trigger split.
pk:alter({range_size = page_size * 2})
---
...
while pk:info().range_count < 2 do space:replace{1, pad} box.snapshot() fiber.sleep(0.01) end
---
...
space:drop()
---
...
